üòÄÔ∏èQueue LLüòÄÔ∏è

#include <iostream>
using namespace std;
struct node {
   int data;
   struct node *next;
};
struct node* front = NULL;
struct node* rear = NULL;
struct node* temp;
void Insert() {
   int val;
   cout<<"Insert the element in queue : "<<endl;
   cin>>val;
   if (rear == NULL) {
      rear = (struct node *)malloc(sizeof(struct node));
      rear->next = NULL;
      rear->data = val;
      front = rear;
   } else {
      temp=(struct node *)malloc(sizeof(struct node));
      rear->next = temp;
      temp->data = val;
      temp->next = NULL;
      rear = temp;
   }
}
void Delete() {
   temp = front;
   if (front == NULL) {
      cout<<"Underflow"<<endl;
      return;
   }
   else
   if (temp->next != NULL) {
      temp = temp->next;
      cout<<"Element deleted from queue is : "<<front->data<<endl;
      free(front);
      front = temp;
   } else {
      cout<<"Element deleted from queue is : "<<front->data<<endl;
      free(front);
      front = NULL;
      rear = NULL;
   }
}
void Display() {
   temp = front;
   if ((front == NULL) && (rear == NULL)) {
      cout<<"Queue is empty"<<endl;
      return;
   }
   cout<<"Queue elements are: ";
   while (temp != NULL) {
      cout<<temp->data<<" ";
      temp = temp->next;
   }
   cout<<endl;
}
int main() {
   int ch;
   cout<<"1) Insert element to queue"<<endl;
   cout<<"2) Delete element from queue"<<endl;
   cout<<"3) Display all the elements of queue"<<endl;
   cout<<"4) Exit"<<endl;
   do {
      cout<<"Enter your choice : "<<endl;
      cin>>ch;
      switch (ch) {
         case 1: Insert();
         break;
         case 2: Delete();
         break;
         case 3: Display();
         break;
         case 4: cout<<"Exit"<<endl;
         break;
         default: cout<<"Invalid choice"<<endl;
      }
   } while(ch!=4);
   return 0;
}

ü•∞Ô∏èStack LLü•∞Ô∏è

#include <iostream>
using namespace std;
struct Node {
   int data;
   struct Node *next;
};
struct Node* top = NULL;
void push(int val) {
   struct Node* newnode = (struct Node*) malloc(sizeof(struct Node));
   newnode->data = val;
   newnode->next = top;
   top = newnode;
}
void pop() {
   if(top==NULL)
   cout<<"Stack Underflow"<<endl;
   else {
      cout<<"The popped element is "<< top->data <<endl;
      top = top->next;
   }
}
void display() {
   struct Node* ptr;
   if(top==NULL)
   cout<<"stack is empty";
   else {
      ptr = top;
      cout<<"Stack elements are: ";
      while (ptr != NULL) {
         cout<< ptr->data <<" ";
         ptr = ptr->next;
      }
   }
   cout<<endl;
}
int main() {
   int ch, val;
   cout<<"1) Push in stack"<<endl;
   cout<<"2) Pop from stack"<<endl;
   cout<<"3) Display stack"<<endl;
   cout<<"4) Exit"<<endl;
   do {
      cout<<"Enter choice: "<<endl;
      cin>>ch;
      switch(ch) {
         case 1: {
            cout<<"Enter value to be pushed:"<<endl;
            cin>>val;
            push(val);
            break;
         }
         case 2: {
            pop();
            break;
         }
         case 3: {
            display();
            break;
         }
         case 4: {
            cout<<"Exit"<<endl;
            break;
         }
         default: {
            cout<<"Invalid Choice"<<endl;
         }
      }
   }while(ch!=4);
   return 0;
}

ü§©Ô∏èC queueü§©Ô∏è

#include <iostream>
using namespace std;

int cqueue[5];
int front = -1, rear = -1, n=5;

void insertCQ(int val) {
   if ((front == 0 && rear == n-1) || (front == rear+1)) {
      cout<<"Queue Overflow \n";
      return;
   }
   if (front == -1) {
      front = 0;
      rear = 0;
   } else {
      if (rear == n - 1)
      rear = 0;
      else
      rear = rear + 1;
   }
   cqueue[rear] = val ;
}
void deleteCQ() {
   if (front == -1) {
      cout<<"Queue Underflow\n";
      return ;
   }
   cout<<"Element deleted from queue is : "<<cqueue[front]<<endl;

   if (front == rear) {
      front = -1;
      rear = -1;
   } else {
      if (front == n - 1)
      front = 0;
      else
      front = front + 1;
   }
}
void displayCQ() {
   int f = front, r = rear;
   if (front == -1) {
      cout<<"Queue is empty"<<endl;
      return;
   }
   cout<<"Queue elements are :\n";
   if (f <= r) {
      while (f <= r){
         cout<<cqueue[f]<<" ";
         f++;
      }
   } else {
      while (f <= n - 1) {
         cout<<cqueue[f]<<" ";
         f++;
      }
      f = 0;
      while (f <= r) {
         cout<<cqueue[f]<<" ";
         f++;
      }
   }
   cout<<endl;
}
int main() {

   int ch, val;
   cout<<"1)Insert\n";
   cout<<"2)Delete\n";
   cout<<"3)Display\n";
   cout<<"4)Exit\n";
   do {
      cout<<"Enter choice : "<<endl;
      cin>>ch;
      switch(ch) {
         case 1:
         cout<<"Input for insertion: "<<endl;
         cin>>val;
         insertCQ(val);
         break;

         case 2:
         deleteCQ();
         break;

         case 3:
         displayCQ();
         break;

         case 4:
         cout<<"Exit\n";
         break;
         default: cout<<"Incorrect!\n";
      }
   } while(ch != 4);
   return 0;
}

‚ò∫Ô∏èLinked list‚ò∫Ô∏è
#include<iostream>
using namespace std;
template<class T>
class Linklist;
template<class T>
class Node
{
T data;
Node *next;
friend class Linklist<T>;
};
template<class T>
class Linklist
{
Node<T> *head;
public:
Linklist()
{
head=NULL;
}
void insert(T value)
{
Node<T> *cur,*prev;
if(head==NULL)
{
cur=new Node<T>;
cur->data=value;
cur->next=NULL;
head=cur;
}
else
{
cur=head;
while(cur!=NULL)
{
prev=cur;
cur=cur->next;
}
cur=new Node<T>;
cur->data=value;
prev->next=cur;
}
}
void display()
{
Node<T>*cur;
cur=head;
cout<<"the elements and address is \n";
while(cur!=NULL)
{
cout<<cur->data<<"->";
cur=cur->next;
}
cout<<"NULL\n";
}
int search(T value)
{
Node<T>*cur;
cur=head;
while(cur!=NULL)
{
if(value==cur->data)
{
cout<<"the element is present\n";
break;
}
else
{
cur=cur->next;
}
}if(cur==NULL)
{
cout<<"the element is not present\n";
return 0;
}
}
void insertpos(int pos,T val)
{
int i=1;
Node<T>*cur,*prev;
cur=head;
prev=NULL;
while(i<pos&&cur!=NULL)
{
prev=cur;
cur=cur->next;
i++;
}
if(cur==head)
{
cur=new Node<T>;
cur->data=val;
cur->next=head;
head=cur;
}
else
{
cur=new Node<T>;
cur->data=val;
cur->next=prev->next;
prev->next=cur;
}
}
void Delete(T val)
{
Node<T>*cur,*prev;
cur=head;
while(cur!=NULL)
{
if(cur->data!=val)
{
prev=cur;
cur=cur->next;
}
else
{
break;
}
}
if(cur==head)
{
head=cur->next;
delete cur;
}
else
{
prev->next=cur->next;
delete cur;
}
}
};
int main()
{
Linklist<int>ob;
int ch,val,p;
do
{
cout<<"1-insert,2-insertposition,3-search,4-delete,5-display\
n";
cout<<"enter your choice\n";
cin>>ch;
switch(ch)
{
case 1:
cout<<"enter value\n";
cin>>val;
ob.insert(val);
break;
case 2:
cout<<"enter position and value\n";
cin>>val;
cin>>p;
ob.insertpos(val,p);
break;
case 3:
cout<<"enter the searching value\n";
cin>>val;
ob.search(val);
break;
case 4:
cout<<"enter the value\n";
cin>>val;
ob.Delete(val);
break;
case 5:
cout<<"print the all elements\n";
ob.display();
break;
}
}while(ch!=6);
}

ü§©Ô∏èSTACK ARRAYü§©Ô∏è

#include <iostream>
using namespace std;
int stack[100], n=100, top=-1;
void push(int val) {
   if(top>=n-1)
   cout<<"Stack Overflow"<<endl;
   else {
      top++;
      stack[top]=val;
   }
}
void pop() {
   if(top<=-1)
   cout<<"Stack Underflow"<<endl;
   else {
      cout<<"The popped element is "<< stack[top] <<endl;
      top--;
   }
}
void display() {
   if(top>=0) {
      cout<<"Stack elements are:";
      for(int i=top; i>=0; i--)
      cout<<stack[i]<<" ";
      cout<<endl;
   } else
   cout<<"Stack is empty";
}
int main() {
   int ch, val;
   cout<<"1) Push in stack"<<endl;
   cout<<"2) Pop from stack"<<endl;
   cout<<"3) Display stack"<<endl;
   cout<<"4) Exit"<<endl;
   do {
      cout<<"Enter choice: "<<endl;
      cin>>ch;
      switch(ch) {
         case 1: {
            cout<<"Enter value to be pushed:"<<endl;
            cin>>val;
            push(val);
            break;
         }
         case 2: {
            pop();
            break;
         }
         case 3: {
            display();
            break;
         }
         case 4: {
            cout<<"Exit"<<endl;
            break;
         }
         default: {
            cout<<"Invalid Choice"<<endl;
         }
      }
   }while(ch!=4);
   return 0;
}


subject=
